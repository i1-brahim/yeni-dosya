import pygame
import sys
import os
import random

pygame.init()

# Ekran ayarları
WIDTH, HEIGHT = 1360, 768
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Mini Mario")

clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 48)

# Sesler
def load_sound(file_name):
    full_path = os.path.join("assets", file_name)
    if os.path.exists(full_path):
        return pygame.mixer.Sound(full_path)
    return None

jump_sound = load_sound("jump.wav")
hit_sound = load_sound("hit.wav")
coin_sound = load_sound("coin.wav")

bg_music_path = os.path.join("assets", "bg_music_fixed.wav")
if os.path.exists(bg_music_path):
    pygame.mixer.music.load(bg_music_path)
    pygame.mixer.music.play(-1)

# Arka plan görseli
background_img_path = os.path.join("assets", "background.jpg")
if os.path.exists(background_img_path):
    background_img = pygame.image.load(background_img_path)
    background_img = pygame.transform.scale(background_img, (WIDTH, HEIGHT))
else:
    background_img = pygame.Surface((WIDTH, HEIGHT))
    background_img.fill((135, 206, 235))

# Renkler
WHITE = (255, 255, 255)
BLUE = (135, 206, 235)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BROWN = (139, 69, 19)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

# Görseller
player_img = pygame.image.load(os.path.join("assets", "player.png"))
player_img = pygame.transform.scale(player_img, (60, 60))

enemy_img = pygame.image.load(os.path.join("assets", "enemy.png"))
enemy_img = pygame.transform.scale(enemy_img, (60, 60))

coin_img = pygame.image.load(os.path.join("assets", "coin.png"))
coin_img = pygame.transform.scale(coin_img, (30, 30))

# Oyuncu
player = pygame.Rect(100, 600, 60, 60)
player_vel = [0, 0]
gravity = 0.5
jumping = False
on_ground = False

# Platformlar
platforms = [
    pygame.Rect(0, 670, 2000, 100),
    pygame.Rect(300, 600, 200, 10),
    pygame.Rect(700, 500, 200, 10),
    pygame.Rect(1100, 400, 200, 10)
]

# Coin'ler
coins = []
for plat in platforms[1:]:
    coin_rect = pygame.Rect(plat.x + plat.width // 2 - 15, plat.y - 30, 30, 30)
    coins.append(coin_rect)

# Düşmanlar
enemy = pygame.Rect(900, 610, 60, 60)
enemy_direction = -4.5

# Zıplayan düşman
jump_enemy = pygame.Rect(400, 600, 60, 60)
jump_enemy_vel = [-3, 0]  # x, y hızı
jump_enemy_gravity = 0.5
jump_timer = 0

# Menü & skor
MENU = True
paused = False
score = 0
show_score_panel = False

# Ses seviyesi
volume = 0.5
pygame.mixer.music.set_volume(volume)

# Pause menüsü butonları
continue_btn = pygame.Rect(WIDTH // 2 - 150, HEIGHT // 2 - 100, 410, 60)
sound_btn = pygame.Rect(WIDTH // 2 - 150, HEIGHT // 2, 410, 60)
exit_btn = pygame.Rect(WIDTH // 2 - 150, HEIGHT // 2 + 100, 410, 60)

def draw_menu():
    screen.fill(BLUE)
    title = font.render("Mini Mario - Başlamak için Enter'a bas", True, WHITE)
    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, HEIGHT // 2 - 30))
    pygame.display.flip()

def draw_pause_menu():
    pygame.draw.rect(screen, WHITE, continue_btn)
    pygame.draw.rect(screen, WHITE, sound_btn)
    pygame.draw.rect(screen, WHITE, exit_btn)
    pygame.draw.rect(screen, BLACK, continue_btn, 3)
    pygame.draw.rect(screen, BLACK, sound_btn, 3)
    pygame.draw.rect(screen, BLACK, exit_btn, 3)
    
    cont_text = font.render("Oyuna Devam Et", True, BLACK)
    sound_text = font.render(f"Ses: {int(volume * 100)}% (Yukarı/Aşağı)", True, BLACK)
    exit_text = font.render("Çıkış", True, RED)

    screen.blit(cont_text, (continue_btn.x + 30, continue_btn.y + 10))
    screen.blit(sound_text, (sound_btn.x + 10, sound_btn.y + 10))
    screen.blit(exit_text, (exit_btn.x + 110, exit_btn.y + 10))

def draw_game():
    screen.blit(background_img, (0, 0))

    for plat in platforms:
        pygame.draw.rect(screen, BROWN, plat)

    for coin in coins:
        screen.blit(coin_img, coin)

    screen.blit(player_img, player)
    screen.blit(enemy_img, enemy)
    screen.blit(enemy_img, jump_enemy)

    score_text = font.render(f"Skor: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))

    if paused:
        draw_pause_menu()

    if show_score_panel:
        panel = pygame.Surface((400, 200))
        panel.fill(WHITE)
        pygame.draw.rect(panel, BLACK, panel.get_rect(), 4)
        final_score = font.render(f"Son Skor: {score}", True, BLACK)
        panel.blit(final_score, (200 - final_score.get_width() // 2, 80))
        screen.blit(panel, (WIDTH // 2 - 200, HEIGHT // 2 - 100))

    pygame.display.flip()

def reset_game():
    global score, show_score_panel, player_vel, player, coins
    player.x, player.y = 100, 600
    player_vel = [0, 0]
    show_score_panel = True
    pygame.time.set_timer(pygame.USEREVENT + 1, 2000)
    score = 0
    coins = []
    for plat in platforms[1:]:
        coin_rect = pygame.Rect(plat.x + plat.width // 2 - 15, plat.y - 30, 30, 30)
        coins.append(coin_rect)

running = True
while running:
    clock.tick(60)

    if MENU:
        draw_menu()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                MENU = False
        continue

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.USEREVENT + 1:
            show_score_panel = False
            pygame.time.set_timer(pygame.USEREVENT + 1, 0)
        elif event.type == pygame.MOUSEBUTTONDOWN and paused:
            mouse_pos = pygame.mouse.get_pos()
            if continue_btn.collidepoint(mouse_pos):
                paused = False
            elif sound_btn.collidepoint(mouse_pos):
                pass  # Ses butonu tıklanınca sadece yazı gösterilecek, ses klavye ile ayarlanır
            elif exit_btn.collidepoint(mouse_pos):
                running = False

    keys = pygame.key.get_pressed()

    if keys[pygame.K_ESCAPE]:
        paused = not paused
        pygame.time.delay(300)

    if not paused:
        if keys[pygame.K_UP]:
            volume = min(1.0, volume + 0.05)
            pygame.mixer.music.set_volume(volume)
        if keys[pygame.K_DOWN]:
            volume = max(0.0, volume - 0.05)
            pygame.mixer.music.set_volume(volume)

        player_vel[0] = 0
        if keys[pygame.K_LEFT]:
            player_vel[0] = -5
        if keys[pygame.K_RIGHT]:
            player_vel[0] = 5
        if keys[pygame.K_SPACE] and on_ground:
            player_vel[1] = -19
            jumping = True
            if jump_sound:
                jump_sound.play()

        player.x += player_vel[0]
        player_vel[1] += gravity
        player.y += player_vel[1]

        on_ground = False
        for plat in platforms:
            if player.colliderect(plat) and player_vel[1] >= 0:
                player.bottom = plat.top
                player_vel[1] = 0
                on_ground = True

        if player.left < 0:
            player.left = 0
        if player.right > WIDTH:
            player.right = WIDTH
        if player.top > HEIGHT:
            reset_game()

        enemy.x += enemy_direction
        if enemy.left < 0 or enemy.right > WIDTH:
            enemy_direction *= -1

        jump_enemy.x += jump_enemy_vel[0]
        if jump_enemy.left < 0 or jump_enemy.right > WIDTH:
            jump_enemy_vel[0] *= -1

        jump_timer += 1
        if jump_timer > 60:
            jump_enemy_vel[1] = -15
            jump_timer = 0
        jump_enemy_vel[1] += jump_enemy_gravity
        jump_enemy.y += jump_enemy_vel[1]

        for plat in platforms:
            if jump_enemy.colliderect(plat) and jump_enemy_vel[1] >= 0:
                jump_enemy.bottom = plat.top
                jump_enemy_vel[1] = 0

        if player.colliderect(enemy) or player.colliderect(jump_enemy):
            if hit_sound:
                hit_sound.play()
            pygame.time.delay(1000)
            reset_game()

        for coin in coins[:]:
            if player.colliderect(coin):
                coins.remove(coin)
                score += 100
                if coin_sound:
                    coin_sound.play()

        score += 1

    draw_game()

pygame.quit()
sys.exit() 
